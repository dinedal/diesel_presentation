%html
  %head
    %meta{charset: 'utf-8'}
    %meta{name: 'viewport', content: 'width=1024'}
    %meta{name: 'apple-mobile-web-app-capable', content: 'yes'}
    %title Building DSLs with Ruby

  %body
    #impress
      #one.step{'data-y' => -1700}
        %q Building DSLs with Ruby

      #approach.step{'data-y' => -1650}
        %q One particular approach

      #whatis.step{'data-y' => -1000}
        %q A DSL is a collection of

      %q.step{'data-y' => -450} Scopes and Methods

      .step{'data-y' => -200}
        %pre.ruby
          :preserve
            thing :foo do
              do_something
              sub_thing :bar do
                do_something or do_something_else
              end
            end

      .step{'data-y' => 400} 
        %q.med What do :foo and :bar actually represent?
      .step{'data-y' => 500}
        %q.med How do do_something and do_something_else know what to operate on?

      .step{'data-y' => 1200}
        %q.med DSL Subjects and a Stack
        %pre.ruby
          :preserve
            thing :foo do
              ...
            end

      .step{'data-y' => 1600}
        %q.med is just a method like
        %pre.ruby
          :preserve
            def thing(name, &block)
              $stack.push( Thing.new(name) )
              $stack.last.instance_exec(&block)
            end

      .step.slide{'data-y' => 2500}
        %q instance_exec 
        %li.small evaluates proc with `self` set to receiver
        %li.small allows for cooler DSLs than the kind you may be used to
        %pre.ruby
          :preserve
            configure do |c|
              c.heese = 'cheese'
            end
        %li.bullet becomes...
        %pre.ruby
          :preserve
            configure do
              heese = 'cheese'
            end
        %li.bullet ... OK that one looked better the old way

      .step{'data-y' => 3700}
        %q Something has to be in charge
        %pre.ruby
          :preserve
            class DSL
              @@stack = []
              def self.thing(name, opts = {}, &block)
                @@stack.push( DSLSubject.new(name, opts) )
                @@stack.last.instance_exec(&block)
              end
            end

      %strong.step{'data-y' => 4200} Introducing DSLSubject
      .step{'data-y' => 4500}
        %q.med Subjects for stacking
        %pre.ruby
          :preserve
            class DSLSubject
              def initialize(name, opts = {})
                @name = name
                @opts = opts
              end

              def speak
                puts "I am a \#{self.class} named \#{@name}"
              end
            end

            

      .step{'data-y' => 5200}
        %strong DSLSubject
        %pre.ruby
          :preserve
            DSL.thing :foo do
              speak
            end
            # => "I am a DSLSubject named foo"

      .step.slide{'data-y' => 5900}
        %q Danger!
        %q.med what if my DSLSubject wants do be able to do things?
        %pre.ruby
          :preserve
            def DSLSubject.end_world! # with a bang
              end_the_world
            end

            DSL.thing :bar do
              end_world!
            end
        %q.med suppose we didn't want users of our DSL to be able to carelessly end the world

      .step{'data-y' => 6600}
        %q Every DSLSubject gets a DSLProxy
        %pre.ruby
          :preserve
            class DSLSubject
              def dsl_proxy
                @dsl_proxy ||= DSLProxy.new(self)
              end

              def safely_end_world
                file_for_world_ending_permit
              end
            end

      .step{'data-y' => 7200}
        %pre.ruby
          :preserve
            class DSLProxy
              def initialize(subject)
                @subject = subject
              end

              def end_world!
                @subject.safely_end_world
              end
            end

      .step.slide{'data-y' => 8000}
        %q DSLProxy
        %pre.ruby
          :preserve
            class DSL
              @@stack = []
              def self.thing(name, opts = {}, &block)
                @@stack.push( DSLSubject.new(name, opts) )
                @@stack.last.dsl_proxy.instance_exec(&block)
              end
            end

            DSL.thing :baz do
              end_world! # => DSLSubject#file_for_world_ending_permit
            end

      %q.step{'data-y' => 9000} What's next?
      %q.med.step{'data-y' => 9200} Implement respond_to? and method_missing on your DSLProxy classes for advanced behavior
      %q.med.step{'data-y' => 9350} Keep a centralized data structure (like Diesel's router) to hold state and let DSLSubjects oq on each other.
      %q.med.step{'data-y' => 9450} Go nuts.  Metaprogram yourself to insanity.  Break all the rules.  Just hide it behind a nice interface.


    %script{src: 'js/impress.js'}
    %script{src: 'js/jquery-1.7.1.min.js'}
    %script{src: 'js/jquery.snippet.js'}
    %link{rel: 'stylesheet', href: 'css/diesel-prez.css'}
    %link{rel: 'stylesheet', href: 'css/jquery.snippet.css'}
    :javascript
      impress();
      $(function() {
        $('pre.ruby').snippet('ruby', {style: 'whatis', showNum: false});
      });
